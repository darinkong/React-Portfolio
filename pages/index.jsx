import Head from "next/head";
import { useState } from "react";
import { useForm } from "react-hook-form";
import Footer from "../components/Footer";
import Hero from "../components/Hero";
import Info from "../components/Info";
import Nav from "../components/Nav";
import Projects from "../components/Projects";
import Skills from "../components/Skills";
import ToTop from "../components/ToTop";
import SubmitButton from "../components/SubmitButton";

export default function Home() {
  const [darkMode, setDarkMode] = useState(true);

  const inputStyles = `my-3 w-[35vh] md:w-[50vh]  rounded-lg bg-gray-100
  px-2 md:px-4 py-2 md:py-3 placeholder-gray-500 text-gray-800 outline-0 input input-bordered input-success  `;
  const textareaStyles = `my-3 w-[35vh] md:w-[50vh]  rounded-lg bg-gray-100
  px-2 md:px-4 py-2 md:py-3 placeholder-gray-500 text-gray-800 outline-0 textarea textarea-success  `;

  const {
    register,
    trigger,
    formState: { errors },
  } = useForm();

  const onSubmit = async (e) => {
    const isValid = await trigger();
    if (!isValid) {
      e.preventDefault();
    }
  };

  return (
    <div className={darkMode ? "dark" : ""}>
      <Head>
        <title>Profile Website</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <main className=" bg-white px-10 dark:bg-gray-900 md:px-20 lg:px-40">
        <Nav toggle={() => setDarkMode(!darkMode)} />
        <Hero />
        <Skills />
        <Projects />
        {/* CONTACT */}
        <section
          id="contact"
          className="text-center text-gray-300 min-h-screen flex flex-col justify-center items-center gap:2 md:gap-8"
        >
          <Info />
          {/* FORM */}
          <div className="mt-10  gap-8 max-w-[65vh] ">
            <div className="mt-10 basis-3/5 md:mt-0">
              <form
                target="_blank"
                onSubmit={onSubmit}
                action="https://formsubmit.co/e8a5bdfa807605332f809e5656e27c6e"
                method="POST"
              >
                <div className="flex flex-col justify-center items-center">
                  <input
                    className={inputStyles}
                    type="search"
                    placeholder="您的姓名"
                    {...register("name", {
                      required: true,
                      maxLength: 100,
                    })}
                  />
                  {errors.name && (
                    <p className="  text-start alert alert-warning h-2 flex items-center">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="stroke-current shrink-0 h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                        />
                      </svg>
                      {errors.name.type === "required" &&
                        "This field is required."}
                      {errors.name.type === "maxLength" &&
                        "Max length is 100 char."}
                    </p>
                  )}
                  <input
                    className={inputStyles}
                    type="search"
                    placeholder="您的邮箱"
                    {...register("email", {
                      required: true,
                      pattern: /^[A-Z0-9._%+-]+@[A-Z0-9.-]+\.[A-Z]{2,}$/i,
                    })}
                  />
                  {errors.email && (
                    <p className=" text-start alert alert-warning h-2 flex items-center">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="stroke-current shrink-0 h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                        />
                      </svg>
                      {errors.email.type === "required" &&
                        "This field is required."}
                      {errors.email.type === "pattern" &&
                        "Invalid email address."}
                    </p>
                  )}
                  <textarea
                    className={textareaStyles}
                    placeholder="请留言..."
                    rows={4}
                    cols={50}
                    {...register("message", {
                      required: true,
                      maxLength: 2000,
                    })}
                  />
                  {errors.message && (
                    <p className="text-start alert alert-warning h-2 flex items-center">
                      <svg
                        xmlns="http://www.w3.org/2000/svg"
                        className="stroke-current shrink-0 h-6 w-6"
                        fill="none"
                        viewBox="0 0 24 24"
                      >
                        <path
                          strokeLinecap="round"
                          strokeLinejoin="round"
                          strokeWidth="2"
                          d="M12 9v2m0 4h.01m-6.938 4h13.856c1.54 0 2.502-1.667 1.732-3L13.732 4c-.77-1.333-2.694-1.333-3.464 0L3.34 16c-.77 1.333.192 3 1.732 3z"
                        />
                      </svg>
                      {errors.message.type === "required" &&
                        "This field is required."}
                      {errors.message.type === "maxLength" &&
                        "Max length is 2000 char."}
                    </p>
                  )}
                  <SubmitButton />
                </div>
              </form>
            </div>
          </div>
        </section>
        <ToTop />
        <Footer />
      </main>
    </div>
  );
}
